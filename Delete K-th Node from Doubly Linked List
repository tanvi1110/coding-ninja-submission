Problem statement
You are given a Doubly linked list, where every node in the linked list contains two pointers, ‘next’ and ‘prev’, which point to the next node and previous node in the list respectively. All nodes have some positive integer value associated with them.

Your task is to delete the node at the ‘k’-th position.

Note:
The 'k' given will always be less than or equal to the length of the 'list'.

Example:
 Input: ‘k’ = 3, 'list' = [1, 2, 5, 4]

 Output: [1, 2, 4]

 Explanation:
 The 3rd node, which is '5', is deleted.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
5 3
12 28 35 47 59 


Sample Output 1:
12 28 47 59 


Explanation Of Sample Input 1:
The 3rd node, which is '35', is deleted.


Sample Input 2:
7 2
8 16 24 32 40 48 56 


Sample Output 2:
8 24 32 40 48 56 


Explanation Of Sample Input 2:
The 2nd node, which is '16', is deleted.


Constraints :
1 <= Length of the list <= 10^4
1 <= ‘k’ <= Length of the list, where ‘k’ is 1-indexed.

Time Limit: 1 sec

Expected Complexity :
Time Complexity : O(k)
Space Complexity : O(1)

Where, 'k' is the position of the node to be deleted in the list.




SOLUTION: 

/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int val;
 *		Node *next;
 * 		Node *prev;
 *		Node() : val(0), next(nullptr), prev(nullptr){};
 *		Node(int x) : val(x), next(nullptr), prev(nullptr) {}
 *		Node(int x, Node *next, Node *prev) : val(x), next(next), prev(prev) {}
 * };
 */

Node *deleteNode(Node *head, int k) {
    // Write your code here
    if(head == NULL || head->next == NULL) return NULL;

    int cnt = 0; Node *temp = head;
    while(temp!=NULL) {
        cnt++;
        if(cnt == k ) break;
        temp = temp->next;
    }

    Node* back = temp->prev;
    Node* front = temp->next;

    if(back == NULL && front == NULL) {
        delete temp;
        return NULL;
    }
    else if(back == NULL) {
        head = head->next;
        head->prev = nullptr;
        delete temp;
    }
    else if(front == NULL) {
        back->next = nullptr;
        temp->prev = nullptr;
        delete temp;
    }
    else {
        back->next = front;
        front->prev = back;
        temp->next = nullptr;
        temp->prev = nullptr;
        delete temp;
    }
    return head;
}
